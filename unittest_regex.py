"""
Unit tests for the regex module

Note: Nearly 90% of the tests are generated by Claude 3.7 Sonnet
"""

import unittest
from regex import (
    State, StartState, TerminationState, DotState, AsciiState,
    CharacterClassState, StarState, PlusState, RegexFSM
)

class TestStateClasses(unittest.TestCase):
    """Test the behavior of individual state classes"""

    def test_start_state(self):
        """Test StartState behavior"""
        start = StartState()
        self.assertFalse(start.check_self('a'), "StartState should not accept any character")
        self.assertEqual(start.next_states, [], "StartState should initialize with empty next_states")

    def test_termination_state(self):
        """Test TerminationState behavior"""
        term = TerminationState()
        self.assertFalse(term.check_self('a'), "TerminationState should not accept any character")
        with self.assertRaises(NotImplementedError, msg="TerminationState.check_next should raise an error"):
            term.check_next('a')

    def test_dot_state(self):
        """Test DotState behavior"""
        dot = DotState()
        self.assertTrue(dot.check_self('a'), "DotState should accept 'a'")
        self.assertTrue(dot.check_self('5'), "DotState should accept '5'")
        self.assertTrue(dot.check_self(' '), "DotState should accept space")
        self.assertTrue(dot.check_self('\n'), "DotState should accept newline")

    def test_ascii_state(self):
        """Test AsciiState behavior"""
        a_state = AsciiState('a')
        self.assertTrue(a_state.check_self('a'), "AsciiState('a') should accept 'a'")
        self.assertFalse(a_state.check_self('b'), "AsciiState('a') should reject 'b'")

        digit_state = AsciiState('7')
        self.assertTrue(digit_state.check_self('7'), "AsciiState('7') should accept '7'")
        self.assertFalse(digit_state.check_self('8'), "AsciiState('7') should reject '8'")

    def test_character_class_state(self):
        """Test CharacterClassState behavior"""
        # Test letter range
        az_state = CharacterClassState('a-z')
        self.assertTrue(az_state.check_self('a'), "CharacterClassState('a-z') should accept 'a'")
        self.assertTrue(az_state.check_self('m'), "CharacterClassState('a-z') should accept 'm'")
        self.assertTrue(az_state.check_self('z'), "CharacterClassState('a-z') should accept 'z'")
        self.assertFalse(az_state.check_self('A'), "CharacterClassState('a-z') should reject 'A'")
        self.assertFalse(az_state.check_self('0'), "CharacterClassState('a-z') should reject '0'")

        # Test digit range
        digit_state = CharacterClassState('0-9')
        self.assertTrue(digit_state.check_self('0'), "CharacterClassState('0-9') should accept '0'")
        self.assertTrue(digit_state.check_self('5'), "CharacterClassState('0-9') should accept '5'")
        self.assertTrue(digit_state.check_self('9'), "CharacterClassState('0-9') should accept '9'")
        self.assertFalse(digit_state.check_self('a'), "CharacterClassState('0-9') should reject 'a'")

        # Test negated class
        negated_state = CharacterClassState('^0-9')
        self.assertTrue(negated_state.check_self('a'), "CharacterClassState('^0-9') should accept 'a'")
        self.assertTrue(negated_state.check_self('Z'), "CharacterClassState('^0-9') should accept 'Z'")
        self.assertFalse(negated_state.check_self('0'), "CharacterClassState('^0-9') should reject '0'")
        self.assertFalse(negated_state.check_self('9'), "CharacterClassState('^0-9') should reject '9'")

        # Test multiple ranges
        mixed_state = CharacterClassState('a-zA-Z0-9')
        self.assertTrue(mixed_state.check_self('a'), "CharacterClassState('a-zA-Z0-9') should accept 'a'")
        self.assertTrue(mixed_state.check_self('Z'), "CharacterClassState('a-zA-Z0-9') should accept 'Z'")
        self.assertTrue(mixed_state.check_self('5'), "CharacterClassState('a-zA-Z0-9') should accept '5'")
        self.assertFalse(mixed_state.check_self('-'), "CharacterClassState('a-zA-Z0-9') should reject '-'")

        # Test individual characters
        chars_state = CharacterClassState('aeiou')
        self.assertTrue(chars_state.check_self('a'), "CharacterClassState('aeiou') should accept 'a'")
        self.assertTrue(chars_state.check_self('e'), "CharacterClassState('aeiou') should accept 'e'")
        self.assertFalse(chars_state.check_self('b'), "CharacterClassState('aeiou') should reject 'b'")


class TestRegexFSMConstruction(unittest.TestCase):
    """Test the construction of the RegexFSM from patterns"""

    def test_valid_patterns(self):
        """Test that valid patterns are accepted during construction"""
        # Simple patterns
        RegexFSM("a")
        RegexFSM(".")
        RegexFSM("abc")

        # Character classes
        RegexFSM("[a-z]")
        RegexFSM("[0-9]")
        RegexFSM("[^a-z]")
        RegexFSM("[a-zA-Z0-9]")

        # Quantifiers
        RegexFSM("a*")
        RegexFSM("a+")
        RegexFSM("a*b")
        RegexFSM("a+b")

        # Complex patterns
        RegexFSM("a*bc[0-9]+")
        RegexFSM("a[b-d]*e+f")

    def test_invalid_patterns(self):
        """Test that invalid patterns raise appropriate errors"""
        # Empty pattern
        with self.assertRaises(ValueError):
            RegexFSM("")

        # Lone quantifiers
        with self.assertRaises(ValueError):
            RegexFSM("*")
        with self.assertRaises(ValueError):
            RegexFSM("+")

        # Quantifier at the beginning
        with self.assertRaises(ValueError):
            RegexFSM("*a")
        with self.assertRaises(ValueError):
            RegexFSM("+b")

        # Unclosed character class
        with self.assertRaises(ValueError):
            RegexFSM("[a-z")
        with self.assertRaises(ValueError):
            RegexFSM("[0-9")


class TestRegexMatching(unittest.TestCase):
    """Test the actual pattern matching functionality"""

    def test_simple_literals(self):
        """Test matching of simple literal patterns"""
        # Single character
        pattern = RegexFSM("a")
        self.assertTrue(pattern.check_string("a"), "Pattern 'a' should match 'a'")
        self.assertFalse(pattern.check_string("b"), "Pattern 'a' should not match 'b'")
        self.assertFalse(pattern.check_string(""), "Pattern 'a' should not match empty string")
        self.assertFalse(pattern.check_string("ab"), "Pattern 'a' should not match 'ab'")

        # Multiple characters
        pattern = RegexFSM("abc")
        self.assertTrue(pattern.check_string("abc"), "Pattern 'abc' should match 'abc'")
        self.assertFalse(pattern.check_string("ab"), "Pattern 'abc' should not match 'ab'")
        self.assertFalse(pattern.check_string("abcd"), "Pattern 'abc' should not match 'abcd'")

    def test_dot_operator(self):
        """Test matching of the dot operator"""
        # Single dot
        pattern = RegexFSM(".")
        self.assertTrue(pattern.check_string("a"), "Pattern '.' should match 'a'")
        self.assertTrue(pattern.check_string("5"), "Pattern '.' should match '5'")
        self.assertFalse(pattern.check_string(""), "Pattern '.' should not match empty string")
        self.assertFalse(pattern.check_string("ab"), "Pattern '.' should not match 'ab'")

        # Dot in pattern
        pattern = RegexFSM("a.c")
        self.assertTrue(pattern.check_string("abc"), "Pattern 'a.c' should match 'abc'")
        self.assertTrue(pattern.check_string("a5c"), "Pattern 'a.c' should match 'a5c'")
        self.assertFalse(pattern.check_string("ac"), "Pattern 'a.c' should not match 'ac'")
        self.assertFalse(pattern.check_string("a55c"), "Pattern 'a.c' should not match 'a55c'")

    def test_character_classes(self):
        """Test matching of character classes"""
        # Simple character class
        pattern = RegexFSM("[a-z]")
        self.assertTrue(pattern.check_string("a"), "Pattern '[a-z]' should match 'a'")
        self.assertTrue(pattern.check_string("z"), "Pattern '[a-z]' should match 'z'")
        self.assertFalse(pattern.check_string("A"), "Pattern '[a-z]' should not match 'A'")
        self.assertFalse(pattern.check_string("5"), "Pattern '[a-z]' should not match '5'")

        # Negated character class
        pattern = RegexFSM("[^0-9]")
        self.assertTrue(pattern.check_string("a"), "Pattern '[^0-9]' should match 'a'")
        self.assertTrue(pattern.check_string("Z"), "Pattern '[^0-9]' should match 'Z'")
        self.assertFalse(pattern.check_string("0"), "Pattern '[^0-9]' should not match '0'")
        self.assertFalse(pattern.check_string("9"), "Pattern '[^0-9]' should not match '9'")

        # Multiple ranges
        pattern = RegexFSM("[a-zA-Z]")
        self.assertTrue(pattern.check_string("a"), "Pattern '[a-zA-Z]' should match 'a'")
        self.assertTrue(pattern.check_string("Z"), "Pattern '[a-zA-Z]' should match 'Z'")
        self.assertFalse(pattern.check_string("5"), "Pattern '[a-zA-Z]' should not match '5'")

    def test_star_quantifier(self):
        """Test matching with the star (*) quantifier"""
        # Star on single character
        pattern = RegexFSM("a*")
        self.assertTrue(pattern.check_string(""), "Pattern 'a*' should match empty string")
        self.assertTrue(pattern.check_string("a"), "Pattern 'a*' should match 'a'")
        self.assertTrue(pattern.check_string("aaaaa"), "Pattern 'a*' should match 'aaaaa'")
        self.assertFalse(pattern.check_string("b"), "Pattern 'a*' should not match 'b'")

        # Star in pattern
        pattern = RegexFSM("a*b")
        self.assertTrue(pattern.check_string("b"), "Pattern 'a*b' should match 'b'")
        self.assertTrue(pattern.check_string("ab"), "Pattern 'a*b' should match 'ab'")
        self.assertTrue(pattern.check_string("aaaab"), "Pattern 'a*b' should match 'aaaab'")
        self.assertFalse(pattern.check_string("a"), "Pattern 'a*b' should not match 'a'")
        self.assertFalse(pattern.check_string("aaaabbb"), "Pattern 'a*b' should not match 'aaaabbb'")

    def test_plus_quantifier(self):
        """Test matching with the plus (+) quantifier"""
        # Plus on single character
        pattern = RegexFSM("a+")
        self.assertFalse(pattern.check_string(""), "Pattern 'a+' should not match empty string")
        self.assertTrue(pattern.check_string("a"), "Pattern 'a+' should match 'a'")
        self.assertTrue(pattern.check_string("aaaaa"), "Pattern 'a+' should match 'aaaaa'")
        self.assertFalse(pattern.check_string("b"), "Pattern 'a+' should not match 'b'")

        # Plus in pattern
        pattern = RegexFSM("a+b")
        self.assertFalse(pattern.check_string("b"), "Pattern 'a+b' should not match 'b'")
        self.assertTrue(pattern.check_string("ab"), "Pattern 'a+b' should match 'ab'")
        self.assertTrue(pattern.check_string("aaaab"), "Pattern 'a+b' should match 'aaaab'")
        self.assertFalse(pattern.check_string("a"), "Pattern 'a+b' should not match 'a'")
        self.assertFalse(pattern.check_string("aaaabbb"), "Pattern 'a+b' should not match 'aaaabbb'")

    def test_complex_patterns(self):
        """Test matching of more complex patterns"""
        # Pattern with multiple components
        pattern = RegexFSM("a*b+c")
        self.assertTrue(pattern.check_string("bc"), "Pattern 'a*b+c' should match 'bc'")
        self.assertTrue(pattern.check_string("abc"), "Pattern 'a*b+c' should match 'abc'")
        self.assertTrue(pattern.check_string("aabbc"), "Pattern 'a*b+c' should match 'aabbc'")
        self.assertFalse(pattern.check_string("ac"), "Pattern 'a*b+c' should not match 'ac'")

        # Pattern with character class and quantifiers
        pattern = RegexFSM("a*[0-9]+b")
        self.assertTrue(pattern.check_string("5b"), "Pattern 'a*[0-9]+b' should match '5b'")
        self.assertTrue(pattern.check_string("a123b"), "Pattern 'a*[0-9]+b' should match 'a123b'")
        self.assertFalse(pattern.check_string("ab"), "Pattern 'a*[0-9]+b' should not match 'ab'")

        # Email-like pattern
        pattern = RegexFSM("[a-z]+@[a-z]+")
        self.assertTrue(pattern.check_string("a@b"), "Simple email pattern should match 'a@b'")
        self.assertTrue(pattern.check_string("test@example"), "Simple email pattern should match 'test@example'")
        self.assertFalse(pattern.check_string("a@"), "Simple email pattern should not match 'a@'")
        self.assertFalse(pattern.check_string("@b"), "Simple email pattern should not match '@b'")

        # The example from the file
        pattern = RegexFSM("a*4.+hi")
        self.assertTrue(pattern.check_string("4xhi"), "Pattern 'a*4.+hi' should match '4xhi'")
        self.assertTrue(pattern.check_string("aaa4yyhi"), "Pattern 'a*4.+hi' should match 'aaa4yyhi'")
        self.assertFalse(pattern.check_string("hi"), "Pattern 'a*4.+hi' should not match 'hi'")
        self.assertFalse(pattern.check_string("a4hi"), "Pattern 'a*4.+hi' should not match 'a4hi'")


if __name__ == '__main__':
    unittest.main()
